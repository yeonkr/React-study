{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/react-udemy/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggdIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggdIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // 모든 함수 재평가 후에 실행된다.  함수가 실행된 후에 유즈이펙트가 실행됨\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true); // state업뎃되고\n    }\n  }, []); // 앱이 처음 실행될때만 이 함수 실행됨 왜냐면 의존성배열에 아무것도 없기 때문\n  // 즉, 의존성이 변경될때만 재실행된다.\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\"); // 무언가를 저장할때.\n\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggdIn: isLoggdIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"dZ70zRwI0eqrFNImAwCVmRKgD8E=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggdIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem","children"],"sources":["/Users/macbook/Desktop/react-udemy/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst AuthContext = React.createContext({\n  isLoggdIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggdIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    // 모든 함수 재평가 후에 실행된다.  함수가 실행된 후에 유즈이펙트가 실행됨\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true); // state업뎃되고\n    }\n  }, []); // 앱이 처음 실행될때만 이 함수 실행됨 왜냐면 의존성배열에 아무것도 없기 때문\n  // 즉, 의존성이 변경될때만 재실행된다.\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\"); // 무언가를 저장할때.\n\n    setIsLoggedIn(true);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggdIn: isLoggdIn,\n        onLogout: logoutHandler,\n        onLogin: loginHandler,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACtCC,SAAS,EAAE,KAD2B;EAEtCC,QAAQ,EAAE,MAAM,CAAE,CAFoB;EAGtCC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAHM,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C,MAAM,CAACN,SAAD,EAAYO,aAAZ,IAA6BX,QAAQ,CAAC,KAAD,CAA3C;EAEAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;IACA,IAAIF,6BAA6B,KAAK,GAAtC,EAA2C;MACzCD,aAAa,CAAC,IAAD,CAAb,CADyC,CACpB;IACtB;EACF,CANQ,EAMN,EANM,CAAT,CAH4C,CASpC;EACR;;EAEA,MAAMI,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACG,UAAb,CAAwB,YAAxB;IAEAL,aAAa,CAAC,KAAD,CAAb;EACD,CAJD;;EAMA,MAAMM,YAAY,GAAG,MAAM;IACzBJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC,EADyB,CACgB;;IAEzCP,aAAa,CAAC,IAAD,CAAb;EACD,CAJD;;EAMA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLP,SAAS,EAAEA,SADN;MAELC,QAAQ,EAAEU,aAFL;MAGLT,OAAO,EAAEW;IAHJ,CADT;IAAA,UAOGP,KAAK,CAACS;EAPT;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAnCM;;GAAMV,mB;;KAAAA,mB;AAqCb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}